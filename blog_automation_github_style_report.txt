
# Blog Automation Project

## Overview

This project automates the generation and publication of blog posts on Medium using AI-generated content, images, and browser automation. The primary components include:
- **OpenAI GPT-4**: For generating blog content.
- **DALL·E**: (or a similar tool) for generating images for blog posts.
- **Selenium**: For automating the process of logging into Medium and publishing the blog post.
- **MySQL**: Optional database setup for storing blog metadata or logs.
- **AWS EC2**: The environment used to host and run the automation script.

This automation pipeline aims to minimize human intervention by allowing scheduled blog creation and publication with minimal manual effort.

---

## Technologies Used

- **Python**: Main scripting language.
- **Selenium**: For browser automation.
- **OpenAI API**: GPT-4 for content generation.
- **MySQL**: (Optional) Used for data storage.
- **AWS EC2**: Ubuntu 24.04 LTS instance used as the cloud infrastructure.
- **Google Chrome & ChromeDriver**: For Medium login and post submission.
- **cron**: For task scheduling and automation (not implemented yet).

---

## Project Setup

### 1. AWS EC2 Instance Setup

- **Instance**: Ubuntu Server 24.04 LTS (HVM), t2.micro instance.
- **Status**: The instance is currently stopped but was successfully set up.
- **Access**: SSH access established using a key pair (`MediumKeyPair.pem`).
- **MySQL Setup**: Installed MySQL on the instance, but it is optional for this stage.

### 2. Python Environment Setup

- **Virtual Environment**: A Python virtual environment (`myenv`) was created to manage dependencies separately from the system environment.
    ```bash
    python3 -m venv myenv
    source myenv/bin/activate
    ```
- **Installed Packages**:
    - `selenium` (for browser automation)
    - `openai` (for GPT-4 API)
    - `mysql-connector-python` (for MySQL integration, optional)

    ```bash
    pip install selenium openai mysql-connector-python
    ```

### 3. Python Script (`automate_blog.py`)

The Python script performs the following tasks:
- **Content Generation**: Uses OpenAI GPT-4 to generate the blog content (pending API key setup).
- **Image Generation**: A placeholder for generating images using DALL·E or similar services (yet to be implemented).
- **Blog Publishing**: Automates Medium login and blog posting using Selenium.
  
Pending tasks:
- **OpenAI API Key**: You need to sign up for the OpenAI API and add the API key to the script:
    ```python
    openai.api_key = 'your-real-api-key'
    ```

---

## Challenges and Issues Encountered

### 1. MySQL Connector Error

An error was encountered when attempting to connect to MySQL using Python. This was resolved by installing the `mysql-connector-python` package in the virtual environment:
```bash
pip install mysql-connector-python
```

### 2. ChromeDriver Version Mismatch

During the Selenium setup, an error occurred due to a version mismatch between **Google Chrome** (`128.x.x`) and **ChromeDriver** (`114.x.x`):
- **Error**: "The chromedriver version 114.0 is incompatible with Chrome version 128.0."
- **Solution (Pending)**: Either downgrade Chrome to match ChromeDriver or install a newer ChromeDriver version to match Chrome.

### 3. OpenAI API Key

The project relies on the **OpenAI API** for content generation. However, it was discovered that the **GPT-4 subscription** does not provide API access. You must create an OpenAI API account and generate an API key.

---

## Next Steps

### 1. Restart the EC2 Instance and SSH Back In
- Once the instance is restarted, reconnect via SSH:
    ```bash
    ssh -i "C:\path	o\MediumKeyPair.pem" ubuntu@your-instance-public-ip
    ```

### 2. Resolve ChromeDriver Version Mismatch
- **Option 1**: Downgrade Chrome to match the installed ChromeDriver.
- **Option 2**: Upgrade ChromeDriver to match Chrome version `128.x.x`.

### 3. Obtain OpenAI API Key
- Sign up for an API account at [OpenAI](https://platform.openai.com/signup).
- Replace the placeholder in your Python script with the real API key:
    ```python
    openai.api_key = 'your-real-api-key'
    ```

### 4. Test the Script
- Run the script manually to ensure that content is generated and the blog is published successfully:
    ```bash
    python automate_blog.py
    ```

### 5. Set Up Automation (cron)
- Once the script is working, set up a cron job to automate the blog publishing process at regular intervals.
- Example to run the script daily at 9 AM:
    ```bash
    crontab -e
    ```
    Add the following line:
    ```bash
    0 9 * * * /usr/bin/python3 /home/ubuntu/automate_blog.py
    ```

---

## Files in the Project

- **`automate_blog.py`**: Main Python script for generating and publishing blogs.
- **`README.md`**: Documentation for setting up and running the project.
- **`requirements.txt`**: Contains the list of Python packages required for the project (created using `pip freeze > requirements.txt`).

---

## Conclusion

The blog automation project has made significant progress. The primary next steps involve resolving version mismatches between ChromeDriver and Chrome, obtaining the OpenAI API key, and testing the script. Once these are addressed, the project will be ready for scheduling using cron jobs, leading to fully automated blog publishing on Medium.

